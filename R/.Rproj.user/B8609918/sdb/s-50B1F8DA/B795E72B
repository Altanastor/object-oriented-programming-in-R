{
    "collab_server" : "",
    "contents" : "\ntop <- function(stack) UseMethod(\"top\")\npop <- function(stack) UseMethod(\"pop\")\npush <- function(stack, element) UseMethod(\"push\")\nis_empty <- function(stack) UseMethod(\"is_empty\")\n\ntop.default <- function(stack) .NotYetImplemented()\npop.default <- function(stack) .NotYetImplemented()\npush.default <- function(stack, element) .NotYetImplemented()\nis_empty.default <- function(stack) .NotYetImplemented()\n\n\nmake_vector_stack <- function(elements) {\n  structure(elements, class = \"vector_stack\")\n}\nempty_vector_stack <- function() {\n  make_vector_stack(vector(\"numeric\"))\n}\ntop.vector_stack <- function(stack) stack[1]\npop.vector_stack <- function(stack) make_vector_stack(stack[-1])\npush.vector_stack <- function(stack, element) make_vector_stack(c(element, stack))\nis_empty.vector_stack <- function(stack) length(stack) == 0\n\nstack <- empty_vector_stack()\nstack <- push(stack, 1)\nstack <- push(stack, 2)\nstack <- push(stack, 3)\nstack\n\nwhile (!is_empty(stack)) {\n  stack <- pop(stack)\n}\n\n\nmake_list_node <- function(head, tail) {\n  structure(list(head = head, tail = tail))\n}\nmake_list_stack <- function(elements) {\n  structure(list(elements = elements), class = \"list_stack\")\n}\nempty_list_stack <- function() make_list_stack(NULL)\ntop.list_stack <- function(stack) stack$elements$head\npop.list_stack <- function(stack) make_list_stack(stack$elements$tail)\npush.list_stack <- function(stack, element) {\n  make_list_stack(make_list_node(element, stack$elements))\n}\nis_empty.list_stack <- function(stack) is.null(stack$elements)\n\n\nstack <- empty_list_stack()\nstack <- push(stack, 1)\nstack <- push(stack, 2)\nstack <- push(stack, 3)\nstack\n\nwhile (!is_empty(stack)) {\n  stack <- pop(stack)\n}\n\nstack_reverse <- function(empty, elements) {\n  stack <- empty\n  for (element in elements) {\n    stack <- push(stack, element)\n  }\n  result <- vector(class(top(stack)), length(elements))\n  for (i in seq_along(result)) {\n    result[i] <- top(stack)\n    stack <- pop(stack)\n  }\n  result\n}\n\n#stack_reverse(empty_vector_stack(), 1:5)\n#stack_reverse(empty_list_stack(), 1:5)\n\nlibrary(microbenchmark)\n\nlibrary(tibble)\nget_time <- function(empty, n) \n  microbenchmark(stack_reverse(empty, 1:n))$time\n#time_stacks <- function(n) {\n#  rbind(tibble(Implementation = \"Vector\", n = n, \n#               Time = get_time(empty_vector_stack(), n)),\n#        tibble(Implementation = \"List\", n = n, \n#               Time = get_time(empty_list_stack(), n)))\n  \n#}\n#times <- do.call(rbind, \n#                 lapply(seq(100, 5000, length.out = 10), \n#                        time_stacks))\n\n#library(ggplot2)\n#ggplot(times) + \n#  geom_boxplot(aes(x = as.factor(n), y = Time, fill = Implementation))\n\n\n\npop_until <- function(stack, element) {\n  if (element %in% stack) {\n    while (top(stack) != element) stack <- pop(stack)\n  }\n  stack\n}\n\nlibrary(magrittr)\nvector_stack <- empty_vector_stack() %>% push(1) %>% push(2) %>% push(3) %T>% print\npop_until(vector_stack, 1)\npop_until(vector_stack, 5)\n\nlist_stack <- empty_list_stack() %>% push(1) %>% push(2) %>% push(3) %T>% print\npop_until(list_stack, 1)\n\npop_until <- function(stack, element) {\n  s <- stack\n  while (!is_empty(s) && top(s) != element) s <- pop(s)\n  if (is_empty(s)) stack else s\n}\nvector_stack <- empty_vector_stack() %>% push(1) %>% push(2) %>% push(3) %T>% print\npop_until(vector_stack, 1)\npop_until(vector_stack, 5)\n\nlist_stack <- empty_list_stack() %>% push(1) %>% push(2) %>% push(3) %T>% print\npop_until(list_stack, 1)\n\ncontains <- function(stack, element) UseMethod(\"contains\")\ncontains.default <- function(stack, element) .NotYetImplemented()\ncontains.vector_stack <- function(stack, element) element %in% stack\n\npop_until <- function(stack, element) {\n  if (contains(stack, element)) {\n    while (top(stack) != element) stack <- pop(stack)\n  }\n  stack\n}\n\n\nvector_stack <- empty_vector_stack() %>% push(1) %>% push(2) %>% push(3) %T>% print\npop_until(vector_stack, 1)\npop_until(vector_stack, 5)\n",
    "created" : 1474435174211.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2289732509",
    "id" : "B795E72B",
    "lastKnownWriteTime" : 1475211198,
    "last_content_update" : 1475211198114,
    "path" : "~/Dropbox/Misc. writing/Books/Advanced Statistical Programming in R/Object Oriented Programming in R/R/stack.R",
    "project_path" : "stack.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}